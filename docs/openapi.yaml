openapi: 3.0.3
info:
  title: EduSystem API
  description: |
    EduSystem is a comprehensive educational management platform API.
    
    ## Authentication
    Most endpoints require authentication using JWT Bearer tokens.
    Include the token in the Authorization header:
    ```
    Authorization: Bearer <your_token>
    ```
  version: 1.0.0
  contact:
    name: EduSystem Support
    email: support@edusystem.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.edusystem.example.com/api
    description: Production server

tags:
  - name: Authentication
    description: Authentication and authorization endpoints
  - name: Users
    description: User management endpoints
  - name: Courses
    description: Course management endpoints
  - name: Assignments
    description: Assignment management endpoints
  - name: Submissions
    description: Assignment submission endpoints
  - name: Grades
    description: Grading endpoints
  - name: Notifications
    description: Notification endpoints

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [student, teacher, admin]
        avatar:
          type: string
          format: uri
        bio:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        title:
          type: string
        description:
          type: string
        teacherId:
          type: string
          format: uuid
        teacher:
          $ref: '#/components/schemas/User'
        syllabus:
          type: string
        schedule:
          type: string
        location:
          type: string
        maxEnrollment:
          type: integer
        enrollmentCount:
          type: integer
        status:
          type: string
          enum: [draft, published, archived]
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Assignment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        courseId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        instructions:
          type: string
        type:
          type: string
          enum: [homework, quiz, exam, project, essay]
        maxPoints:
          type: number
          format: float
        dueDate:
          type: string
          format: date-time
        allowLateSubmission:
          type: boolean
        latePenalty:
          type: number
          format: float
        status:
          type: string
          enum: [draft, published, closed]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Submission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        assignmentId:
          type: string
          format: uuid
        studentId:
          type: string
          format: uuid
        student:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [draft, submitted, graded]
        submittedAt:
          type: string
          format: date-time
        isLate:
          type: boolean
        file:
          type: object
          properties:
            filename:
              type: string
            url:
              type: string
              format: uri
            size:
              type: integer
        textContent:
          type: string
        links:
          type: array
          items:
            type: string
        grade:
          $ref: '#/components/schemas/Grade'

    Grade:
      type: object
      properties:
        id:
          type: string
          format: uuid
        submissionId:
          type: string
          format: uuid
        points:
          type: number
          format: float
        maxPoints:
          type: number
          format: float
        percentage:
          type: number
          format: float
        feedback:
          type: string
        gradedBy:
          $ref: '#/components/schemas/User'
        gradedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items: {}
        pagination:
          type: object
          properties:
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
            pages:
              type: integer

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
                - role
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                  minLength: 2
                lastName:
                  type: string
                  minLength: 2
                role:
                  type: string
                  enum: [student, teacher, admin]
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /courses:
    get:
      tags:
        - Courses
      summary: List all courses
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, archived]
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Course'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Courses
      summary: Create a new course
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
                - title
                - description
                - startDate
                - endDate
              properties:
                code:
                  type: string
                  minLength: 2
                  maxLength: 20
                title:
                  type: string
                  minLength: 5
                  maxLength: 200
                description:
                  type: string
                syllabus:
                  type: string
                schedule:
                  type: string
                location:
                  type: string
                maxEnrollment:
                  type: integer
                  minimum: 1
                status:
                  type: string
                  enum: [draft, published]
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
      responses:
        '201':
          description: Course created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden (insufficient permissions)

  /courses/{id}:
    get:
      tags:
        - Courses
      summary: Get course by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Course details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /courses/{id}/enroll:
    post:
      tags:
        - Courses
      summary: Enroll in a course
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Enrolled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  enrollment:
                    type: object
        '409':
          description: Already enrolled
        '422':
          description: Course full or not accepting enrollments

  /assignments/{id}/submit:
    post:
      tags:
        - Submissions
      summary: Submit an assignment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                text:
                  type: string
                links:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Submission created
          content:
            application/json:
              schema:
                type: object
                properties:
                  submission:
                    $ref: '#/components/schemas/Submission'
        '400':
          description: Invalid submission
        '409':
          description: Already submitted

  /submissions/{id}/grade:
    post:
      tags:
        - Grades
      summary: Grade a submission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - points
              properties:
                points:
                  type: number
                  format: float
                feedback:
                  type: string
                rubricScores:
                  type: array
                  items:
                    type: object
                    properties:
                      criteriaId:
                        type: string
                        format: uuid
                      points:
                        type: number
                      maxPoints:
                        type: number
                      comment:
                        type: string
      responses:
        '200':
          description: Grade submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  grade:
                    $ref: '#/components/schemas/Grade'
        '403':
          description: Forbidden (insufficient permissions)
        '404':
          description: Submission not found
